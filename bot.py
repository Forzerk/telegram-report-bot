from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)

TOKEN = "7631176083:AAGfY8H_3yOm2ei029jjyCzHF_AF7I9-mwQ"
CHANNEL_ID = 669910795
user_names = {}
ASK_NAME = 1

name_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="set_name")]
])

main_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="send_report")]
])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    user_id = update.effective_user.id
    if user_id in user_names:
        await update.message.reply_text("–¢—ã —É–∂–µ –≤–≤—ë–ª –∏–º—è. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_keyboard)
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç!\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á—ë—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:",
            reply_markup=name_keyboard
        )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "set_name":
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
        return ASK_NAME

    if query.data == "send_report":
        if user_id in user_names:
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ.")
        else:
            await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è!", reply_markup=name_keyboard)
    return ConversationHandler.END

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ASK_NAME

    user_names[user_id] = name
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã üëá", reply_markup=main_keyboard)
    return ConversationHandler.END

def get_display_name(user_id):
    return user_names.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.effective_chat.type != "private" or user_id not in user_names:
        return
    text = update.message.text
    if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        return
    name = get_display_name(user_id)
    await update.message.reply_text("–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"–û—Ç—á—ë—Ç –æ—Ç {name}:\n\n{text}"
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.effective_chat.type != "private" or user_id not in user_names:
        return
    document = update.message.document
    name = get_display_name(user_id)
    await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await context.bot.send_document(
        chat_id=CHANNEL_ID,
        document=document.file_id,
        caption=f"–û—Ç—á—ë—Ç –æ—Ç {name}"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.effective_chat.type != "private" or user_id not in user_names:
        return
    photo = update.message.photo[-1]
    name = get_display_name(user_id)
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    await context.bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=photo.file_id,
        caption=f"–û—Ç—á—ë—Ç –æ—Ç {name}"
    )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    user_id = update.effective_user.id
    if user_id not in user_names:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=name_keyboard)
    else:
        await update.message.reply_text("–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç!", reply_markup=main_keyboard)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_button)],
        states={ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)]},
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.ALL, unknown))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()


